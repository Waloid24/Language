code[1] = 33 (push 0)
code[2] = 0
code[3] = 66 (pop rax)
code[4] = 0
code[5] = 33 (push 10)
code[6] = 10
code[7] = 66 (pop rbx)
code[8] = 1
code[9] = 33 (push 0)
code[10] = 0
code[11] = 226 (pop [rbx + 0])
code[12] = 1
code[13] = 0
code[14] = 33 (push 0)
code[15] = 0
code[16] = 226 (pop [rbx + 1])
code[17] = 1
code[18] = 1
code[19] = 33 (push 0)
code[20] = 0
code[21] = 226 (pop [rbx + 2])
code[22] = 1
code[23] = 2
code[24] = 8 (in)
code[25] = 226 (pop [rbx + 0])
code[26] = 1
code[27] = 0
code[28] = 8 (in)
code[29] = 226 (pop [rbx + 1])
code[30] = 1
code[31] = 1
code[32] = 8 (in)
code[33] = 226 (pop [rbx + 2])
code[34] = 1
code[35] = 2
code[36] = 225 (push [rbx + 0])
code[37] = 1
code[38] = 0
code[39] = 33 (push 0)
code[40] = 0
code[41] = 25 (be)
code[42] = 33 (push 0)
code[43] = 0
code[43] = 16 (je else0:)
code[45] = 225 (push [rbx + 1])
code[46] = 1
code[47] = 1
code[48] = 33 (push 0)
code[49] = 0
code[50] = 25 (be)
code[51] = 33 (push 0)
code[52] = 0
code[52] = 16 (je else1:)
code[54] = 225 (push [rbx + 2])
code[55] = 1
code[56] = 2
code[57] = 33 (push 0)
code[58] = 0
code[59] = 26 (bne)
code[60] = 33 (push 0)
code[61] = 0
code[61] = 16 (je else2:)
code[63] = 33 (push 666000)
code[64] = 666000
code[65] = 7 (out)
code[66] = 18 (hlt)
code[66] = 9 (jmp elseExit2:)
code[68] = 33 (push 777000)
code[69] = 777000
code[70] = 7 (out)
code[71] = 18 (hlt)
code[71] = 9 (jmp elseExit1:)
code[73] = 33 (push -1)
code[74] = -1
code[75] = 225 (push [rbx + 2])
code[76] = 1
code[77] = 2
code[78] = 5 (mul)
code[79] = 225 (push [rbx + 1])
code[80] = 1
code[81] = 1
code[82] = 6 (div)
code[83] = 226 (pop [rbx + 3])
code[84] = 1
code[85] = 3
code[86] = 225 (push [rbx + 3])
code[87] = 1
code[88] = 3
code[89] = 7 (out)
code[90] = 18 (hlt)
code[90] = 9 (jmp elseExit0:)
code[92] = 225 (push [rbx + 1])
code[93] = 1
code[94] = 1
code[95] = 225 (push [rbx + 1])
code[96] = 1
code[97] = 1
code[98] = 5 (mul)
code[99] = 33 (push 4000)
code[100] = 4000
code[101] = 225 (push [rbx + 0])
code[102] = 1
code[103] = 0
code[104] = 5 (mul)
code[105] = 225 (push [rbx + 2])
code[106] = 1
code[107] = 2
code[108] = 5 (mul)
code[109] = 4 (sub)
code[110] = 226 (pop [rbx + 4])
code[111] = 1
code[112] = 4
code[113] = 225 (push [rbx + 4])
code[114] = 1
code[115] = 4
code[116] = 7 (out)
code[117] = 33 (push -1)
code[118] = -1
code[119] = 225 (push [rbx + 1])
code[120] = 1
code[121] = 1
code[122] = 5 (mul)
code[123] = 7 (out)
code[124] = 225 (push [rbx + 4])
code[125] = 1
code[126] = 4
code[127] = 33 (push 0)
code[128] = 0
code[129] = 25 (be)
code[130] = 33 (push 0)
code[131] = 0
code[131] = 16 (je else3:)
code[133] = 33 (push -1)
code[134] = -1
code[135] = 225 (push [rbx + 1])
code[136] = 1
code[137] = 1
code[138] = 5 (mul)
code[139] = 33 (push 2000)
code[140] = 2000
code[141] = 225 (push [rbx + 0])
code[142] = 1
code[143] = 0
code[144] = 5 (mul)
code[145] = 6 (div)
code[146] = 226 (pop [rbx + 3])
code[147] = 1
code[148] = 3
code[149] = 225 (push [rbx + 3])
code[150] = 1
code[151] = 3
code[152] = 7 (out)
code[153] = 18 (hlt)
code[153] = 9 (jmp elseExit3:)
code[155] = 33 (push -1)
code[156] = -1
code[157] = 225 (push [rbx + 1])
code[158] = 1
code[159] = 1
code[160] = 5 (mul)
code[161] = 225 (push [rbx + 4])
code[162] = 1
code[163] = 4
code[164] = 19 (sqrt)
code[165] = 3 (add)
code[166] = 33 (push 2000)
code[167] = 2000
code[168] = 225 (push [rbx + 0])
code[169] = 1
code[170] = 0
code[171] = 5 (mul)
code[172] = 6 (div)
code[173] = 226 (pop [rbx + 5])
code[174] = 1
code[175] = 5
code[176] = 33 (push -1)
code[177] = -1
code[178] = 225 (push [rbx + 1])
code[179] = 1
code[180] = 1
code[181] = 5 (mul)
code[182] = 225 (push [rbx + 4])
code[183] = 1
code[184] = 4
code[185] = 19 (sqrt)
code[186] = 4 (sub)
code[187] = 33 (push 2000)
code[188] = 2000
code[189] = 225 (push [rbx + 0])
code[190] = 1
code[191] = 0
code[192] = 5 (mul)
code[193] = 6 (div)
code[194] = 226 (pop [rbx + 6])
code[195] = 1
code[196] = 6
code[197] = 225 (push [rbx + 5])
code[198] = 1
code[199] = 5
code[200] = 7 (out)
code[201] = 225 (push [rbx + 6])
code[202] = 1
code[203] = 6
code[204] = 7 (out)
code[205] = 18 (hlt)
code[1] = 33 (push 0)
code[2] = 0
code[3] = 66 (pop rax)
code[4] = 0
code[5] = 33 (push 10)
code[6] = 10
code[7] = 66 (pop rbx)
code[8] = 1
code[9] = 33 (push 0)
code[10] = 0
code[11] = 226 (pop [rbx + 0])
code[12] = 1
code[13] = 0
code[14] = 33 (push 0)
code[15] = 0
code[16] = 226 (pop [rbx + 1])
code[17] = 1
code[18] = 1
code[19] = 33 (push 0)
code[20] = 0
code[21] = 226 (pop [rbx + 2])
code[22] = 1
code[23] = 2
code[24] = 8 (in)
code[25] = 226 (pop [rbx + 0])
code[26] = 1
code[27] = 0
code[28] = 8 (in)
code[29] = 226 (pop [rbx + 1])
code[30] = 1
code[31] = 1
code[32] = 8 (in)
code[33] = 226 (pop [rbx + 2])
code[34] = 1
code[35] = 2
code[36] = 225 (push [rbx + 0])
code[37] = 1
code[38] = 0
code[39] = 33 (push 0)
code[40] = 0
code[41] = 25 (be)
code[42] = 33 (push 0)
code[43] = 0
code[43] = 16 (je else0:)
code[45] = 225 (push [rbx + 1])
code[46] = 1
code[47] = 1
code[48] = 33 (push 0)
code[49] = 0
code[50] = 25 (be)
code[51] = 33 (push 0)
code[52] = 0
code[52] = 16 (je else1:)
code[54] = 225 (push [rbx + 2])
code[55] = 1
code[56] = 2
code[57] = 33 (push 0)
code[58] = 0
code[59] = 26 (bne)
code[60] = 33 (push 0)
code[61] = 0
code[61] = 16 (je else2:)
code[63] = 33 (push 666000)
code[64] = 666000
code[65] = 7 (out)
code[66] = 18 (hlt)
code[66] = 9 (jmp elseExit2:)
code[68] = 33 (push 777000)
code[69] = 777000
code[70] = 7 (out)
code[71] = 18 (hlt)
code[71] = 9 (jmp elseExit1:)
code[73] = 33 (push -1)
code[74] = -1
code[75] = 225 (push [rbx + 2])
code[76] = 1
code[77] = 2
code[78] = 5 (mul)
code[79] = 225 (push [rbx + 1])
code[80] = 1
code[81] = 1
code[82] = 6 (div)
code[83] = 226 (pop [rbx + 3])
code[84] = 1
code[85] = 3
code[86] = 225 (push [rbx + 3])
code[87] = 1
code[88] = 3
code[89] = 7 (out)
code[90] = 18 (hlt)
code[90] = 9 (jmp elseExit0:)
code[92] = 225 (push [rbx + 1])
code[93] = 1
code[94] = 1
code[95] = 225 (push [rbx + 1])
code[96] = 1
code[97] = 1
code[98] = 5 (mul)
code[99] = 33 (push 4000)
code[100] = 4000
code[101] = 225 (push [rbx + 0])
code[102] = 1
code[103] = 0
code[104] = 5 (mul)
code[105] = 225 (push [rbx + 2])
code[106] = 1
code[107] = 2
code[108] = 5 (mul)
code[109] = 4 (sub)
code[110] = 226 (pop [rbx + 4])
code[111] = 1
code[112] = 4
code[113] = 225 (push [rbx + 4])
code[114] = 1
code[115] = 4
code[116] = 7 (out)
code[117] = 33 (push -1)
code[118] = -1
code[119] = 225 (push [rbx + 1])
code[120] = 1
code[121] = 1
code[122] = 5 (mul)
code[123] = 7 (out)
code[124] = 225 (push [rbx + 4])
code[125] = 1
code[126] = 4
code[127] = 33 (push 0)
code[128] = 0
code[129] = 25 (be)
code[130] = 33 (push 0)
code[131] = 0
code[131] = 16 (je else3:)
code[133] = 33 (push -1)
code[134] = -1
code[135] = 225 (push [rbx + 1])
code[136] = 1
code[137] = 1
code[138] = 5 (mul)
code[139] = 33 (push 2000)
code[140] = 2000
code[141] = 225 (push [rbx + 0])
code[142] = 1
code[143] = 0
code[144] = 5 (mul)
code[145] = 6 (div)
code[146] = 226 (pop [rbx + 3])
code[147] = 1
code[148] = 3
code[149] = 225 (push [rbx + 3])
code[150] = 1
code[151] = 3
code[152] = 7 (out)
code[153] = 18 (hlt)
code[153] = 9 (jmp elseExit3:)
code[155] = 33 (push -1)
code[156] = -1
code[157] = 225 (push [rbx + 1])
code[158] = 1
code[159] = 1
code[160] = 5 (mul)
code[161] = 225 (push [rbx + 4])
code[162] = 1
code[163] = 4
code[164] = 19 (sqrt)
code[165] = 3 (add)
code[166] = 33 (push 2000)
code[167] = 2000
code[168] = 225 (push [rbx + 0])
code[169] = 1
code[170] = 0
code[171] = 5 (mul)
code[172] = 6 (div)
code[173] = 226 (pop [rbx + 5])
code[174] = 1
code[175] = 5
code[176] = 33 (push -1)
code[177] = -1
code[178] = 225 (push [rbx + 1])
code[179] = 1
code[180] = 1
code[181] = 5 (mul)
code[182] = 225 (push [rbx + 4])
code[183] = 1
code[184] = 4
code[185] = 19 (sqrt)
code[186] = 4 (sub)
code[187] = 33 (push 2000)
code[188] = 2000
code[189] = 225 (push [rbx + 0])
code[190] = 1
code[191] = 0
code[192] = 5 (mul)
code[193] = 6 (div)
code[194] = 226 (pop [rbx + 6])
code[195] = 1
code[196] = 6
code[197] = 225 (push [rbx + 5])
code[198] = 1
code[199] = 5
code[200] = 7 (out)
code[201] = 225 (push [rbx + 6])
code[202] = 1
code[203] = 6
code[204] = 7 (out)
code[205] = 18 (hlt)
code[1] = 33 (push 0)
code[2] = 0
code[3] = 66 (pop rax)
code[4] = 0
code[5] = 33 (push 10)
code[6] = 10
code[7] = 66 (pop rbx)
code[8] = 1
code[9] = 33 (push 0)
code[10] = 0
code[11] = 226 (pop [rbx + 0])
code[12] = 1
code[13] = 0
code[14] = 33 (push 0)
code[15] = 0
code[16] = 226 (pop [rbx + 1])
code[17] = 1
code[18] = 1
code[19] = 33 (push 0)
code[20] = 0
code[21] = 226 (pop [rbx + 2])
code[22] = 1
code[23] = 2
code[24] = 8 (in)
code[25] = 226 (pop [rbx + 0])
code[26] = 1
code[27] = 0
code[28] = 8 (in)
code[29] = 226 (pop [rbx + 1])
code[30] = 1
code[31] = 1
code[32] = 8 (in)
code[33] = 226 (pop [rbx + 2])
code[34] = 1
code[35] = 2
code[36] = 225 (push [rbx + 0])
code[37] = 1
code[38] = 0
code[39] = 33 (push 0)
code[40] = 0
code[41] = 25 (be)
code[42] = 33 (push 0)
code[43] = 0
code[43] = 16 (je else0:)
code[45] = 225 (push [rbx + 1])
code[46] = 1
code[47] = 1
code[48] = 33 (push 0)
code[49] = 0
code[50] = 25 (be)
code[51] = 33 (push 0)
code[52] = 0
code[52] = 16 (je else1:)
code[54] = 225 (push [rbx + 2])
code[55] = 1
code[56] = 2
code[57] = 33 (push 0)
code[58] = 0
code[59] = 26 (bne)
code[60] = 33 (push 0)
code[61] = 0
code[61] = 16 (je else2:)
code[63] = 33 (push 666000)
code[64] = 666000
code[65] = 7 (out)
code[66] = 18 (hlt)
code[66] = 9 (jmp elseExit2:)
code[68] = 33 (push 777000)
code[69] = 777000
code[70] = 7 (out)
code[71] = 18 (hlt)
code[71] = 9 (jmp elseExit1:)
code[73] = 33 (push -1000)
code[74] = -1000
code[75] = 225 (push [rbx + 2])
code[76] = 1
code[77] = 2
code[78] = 5 (mul)
code[79] = 225 (push [rbx + 1])
code[80] = 1
code[81] = 1
code[82] = 6 (div)
code[83] = 226 (pop [rbx + 3])
code[84] = 1
code[85] = 3
code[86] = 225 (push [rbx + 3])
code[87] = 1
code[88] = 3
code[89] = 7 (out)
code[90] = 18 (hlt)
code[90] = 9 (jmp elseExit0:)
code[92] = 225 (push [rbx + 1])
code[93] = 1
code[94] = 1
code[95] = 225 (push [rbx + 1])
code[96] = 1
code[97] = 1
code[98] = 5 (mul)
code[99] = 33 (push 4000)
code[100] = 4000
code[101] = 225 (push [rbx + 0])
code[102] = 1
code[103] = 0
code[104] = 5 (mul)
code[105] = 225 (push [rbx + 2])
code[106] = 1
code[107] = 2
code[108] = 5 (mul)
code[109] = 4 (sub)
code[110] = 226 (pop [rbx + 4])
code[111] = 1
code[112] = 4
code[113] = 225 (push [rbx + 4])
code[114] = 1
code[115] = 4
code[116] = 7 (out)
code[117] = 33 (push -1000)
code[118] = -1000
code[119] = 225 (push [rbx + 1])
code[120] = 1
code[121] = 1
code[122] = 5 (mul)
code[123] = 7 (out)
code[124] = 225 (push [rbx + 4])
code[125] = 1
code[126] = 4
code[127] = 33 (push 0)
code[128] = 0
code[129] = 25 (be)
code[130] = 33 (push 0)
code[131] = 0
code[131] = 16 (je else3:)
code[133] = 33 (push -1000)
code[134] = -1000
code[135] = 225 (push [rbx + 1])
code[136] = 1
code[137] = 1
code[138] = 5 (mul)
code[139] = 33 (push 2000)
code[140] = 2000
code[141] = 225 (push [rbx + 0])
code[142] = 1
code[143] = 0
code[144] = 5 (mul)
code[145] = 6 (div)
code[146] = 226 (pop [rbx + 3])
code[147] = 1
code[148] = 3
code[149] = 225 (push [rbx + 3])
code[150] = 1
code[151] = 3
code[152] = 7 (out)
code[153] = 18 (hlt)
code[153] = 9 (jmp elseExit3:)
code[155] = 33 (push -1000)
code[156] = -1000
code[157] = 225 (push [rbx + 1])
code[158] = 1
code[159] = 1
code[160] = 5 (mul)
code[161] = 225 (push [rbx + 4])
code[162] = 1
code[163] = 4
code[164] = 19 (sqrt)
code[165] = 3 (add)
code[166] = 33 (push 2000)
code[167] = 2000
code[168] = 225 (push [rbx + 0])
code[169] = 1
code[170] = 0
code[171] = 5 (mul)
code[172] = 6 (div)
code[173] = 226 (pop [rbx + 5])
code[174] = 1
code[175] = 5
code[176] = 33 (push -1000)
code[177] = -1000
code[178] = 225 (push [rbx + 1])
code[179] = 1
code[180] = 1
code[181] = 5 (mul)
code[182] = 225 (push [rbx + 4])
code[183] = 1
code[184] = 4
code[185] = 19 (sqrt)
code[186] = 4 (sub)
code[187] = 33 (push 2000)
code[188] = 2000
code[189] = 225 (push [rbx + 0])
code[190] = 1
code[191] = 0
code[192] = 5 (mul)
code[193] = 6 (div)
code[194] = 226 (pop [rbx + 6])
code[195] = 1
code[196] = 6
code[197] = 225 (push [rbx + 5])
code[198] = 1
code[199] = 5
code[200] = 7 (out)
code[201] = 225 (push [rbx + 6])
code[202] = 1
code[203] = 6
code[204] = 7 (out)
code[205] = 18 (hlt)
code[1] = 33 (push 0)
code[2] = 0
code[3] = 66 (pop rax)
code[4] = 0
code[5] = 33 (push 10)
code[6] = 10
code[7] = 66 (pop rbx)
code[8] = 1
code[9] = 33 (push 0)
code[10] = 0
code[11] = 226 (pop [rbx + 0])
code[12] = 1
code[13] = 0
code[14] = 33 (push 0)
code[15] = 0
code[16] = 226 (pop [rbx + 1])
code[17] = 1
code[18] = 1
code[19] = 33 (push 0)
code[20] = 0
code[21] = 226 (pop [rbx + 2])
code[22] = 1
code[23] = 2
code[24] = 8 (in)
code[25] = 226 (pop [rbx + 0])
code[26] = 1
code[27] = 0
code[28] = 8 (in)
code[29] = 226 (pop [rbx + 1])
code[30] = 1
code[31] = 1
code[32] = 8 (in)
code[33] = 226 (pop [rbx + 2])
code[34] = 1
code[35] = 2
code[36] = 225 (push [rbx + 0])
code[37] = 1
code[38] = 0
code[39] = 33 (push 0)
code[40] = 0
code[41] = 25 (be)
code[42] = 33 (push 0)
code[43] = 0
code[43] = 16 (je else0:)
code[45] = 225 (push [rbx + 1])
code[46] = 1
code[47] = 1
code[48] = 33 (push 0)
code[49] = 0
code[50] = 25 (be)
code[51] = 33 (push 0)
code[52] = 0
code[52] = 16 (je else1:)
code[54] = 225 (push [rbx + 2])
code[55] = 1
code[56] = 2
code[57] = 33 (push 0)
code[58] = 0
code[59] = 26 (bne)
code[60] = 33 (push 0)
code[61] = 0
code[61] = 16 (je else2:)
code[63] = 33 (push 666000)
code[64] = 666000
code[65] = 7 (out)
code[66] = 18 (hlt)
code[66] = 9 (jmp elseExit2:)
code[68] = 33 (push 777000)
code[69] = 777000
code[70] = 7 (out)
code[71] = 18 (hlt)
code[71] = 9 (jmp elseExit1:)
code[73] = 33 (push -1000)
code[74] = -1000
code[75] = 225 (push [rbx + 2])
code[76] = 1
code[77] = 2
code[78] = 5 (mul)
code[79] = 225 (push [rbx + 1])
code[80] = 1
code[81] = 1
code[82] = 6 (div)
code[83] = 226 (pop [rbx + 3])
code[84] = 1
code[85] = 3
code[86] = 225 (push [rbx + 3])
code[87] = 1
code[88] = 3
code[89] = 7 (out)
code[90] = 18 (hlt)
code[90] = 9 (jmp elseExit0:)
code[92] = 225 (push [rbx + 1])
code[93] = 1
code[94] = 1
code[95] = 225 (push [rbx + 1])
code[96] = 1
code[97] = 1
code[98] = 5 (mul)
code[99] = 33 (push 4000)
code[100] = 4000
code[101] = 225 (push [rbx + 0])
code[102] = 1
code[103] = 0
code[104] = 5 (mul)
code[105] = 225 (push [rbx + 2])
code[106] = 1
code[107] = 2
code[108] = 5 (mul)
code[109] = 4 (sub)
code[110] = 226 (pop [rbx + 4])
code[111] = 1
code[112] = 4
code[113] = 225 (push [rbx + 4])
code[114] = 1
code[115] = 4
code[116] = 7 (out)
code[117] = 33 (push -1000)
code[118] = -1000
code[119] = 225 (push [rbx + 1])
code[120] = 1
code[121] = 1
code[122] = 5 (mul)
code[123] = 7 (out)
code[124] = 225 (push [rbx + 4])
code[125] = 1
code[126] = 4
code[127] = 33 (push 0)
code[128] = 0
code[129] = 25 (be)
code[130] = 33 (push 0)
code[131] = 0
code[131] = 16 (je else3:)
code[133] = 33 (push -1000)
code[134] = -1000
code[135] = 225 (push [rbx + 1])
code[136] = 1
code[137] = 1
code[138] = 5 (mul)
code[139] = 33 (push 2000)
code[140] = 2000
code[141] = 225 (push [rbx + 0])
code[142] = 1
code[143] = 0
code[144] = 5 (mul)
code[145] = 6 (div)
code[146] = 226 (pop [rbx + 3])
code[147] = 1
code[148] = 3
code[149] = 225 (push [rbx + 3])
code[150] = 1
code[151] = 3
code[152] = 7 (out)
code[153] = 18 (hlt)
code[153] = 9 (jmp elseExit3:)
code[155] = 33 (push -1000)
code[156] = -1000
code[157] = 225 (push [rbx + 1])
code[158] = 1
code[159] = 1
code[160] = 5 (mul)
code[161] = 225 (push [rbx + 4])
code[162] = 1
code[163] = 4
code[164] = 19 (sqrt)
code[165] = 3 (add)
code[166] = 33 (push 2000)
code[167] = 2000
code[168] = 225 (push [rbx + 0])
code[169] = 1
code[170] = 0
code[171] = 5 (mul)
code[172] = 6 (div)
code[173] = 226 (pop [rbx + 5])
code[174] = 1
code[175] = 5
code[176] = 33 (push -1000)
code[177] = -1000
code[178] = 225 (push [rbx + 1])
code[179] = 1
code[180] = 1
code[181] = 5 (mul)
code[182] = 225 (push [rbx + 4])
code[183] = 1
code[184] = 4
code[185] = 19 (sqrt)
code[186] = 4 (sub)
code[187] = 33 (push 2000)
code[188] = 2000
code[189] = 225 (push [rbx + 0])
code[190] = 1
code[191] = 0
code[192] = 5 (mul)
code[193] = 6 (div)
code[194] = 226 (pop [rbx + 6])
code[195] = 1
code[196] = 6
code[197] = 225 (push [rbx + 5])
code[198] = 1
code[199] = 5
code[200] = 7 (out)
code[201] = 225 (push [rbx + 6])
code[202] = 1
code[203] = 6
code[204] = 7 (out)
code[205] = 18 (hlt)
code[1] = 33 (push 0)
code[2] = 0
code[3] = 66 (pop rax)
code[4] = 0
code[5] = 33 (push 10)
code[6] = 10
code[7] = 66 (pop rbx)
code[8] = 1
code[9] = 33 (push 0)
code[10] = 0
code[11] = 226 (pop [rbx + 0])
code[12] = 1
code[13] = 0
code[14] = 33 (push 0)
code[15] = 0
code[16] = 226 (pop [rbx + 1])
code[17] = 1
code[18] = 1
code[19] = 33 (push 0)
code[20] = 0
code[21] = 226 (pop [rbx + 2])
code[22] = 1
code[23] = 2
code[24] = 8 (in)
code[25] = 226 (pop [rbx + 0])
code[26] = 1
code[27] = 0
code[28] = 8 (in)
code[29] = 226 (pop [rbx + 1])
code[30] = 1
code[31] = 1
code[32] = 8 (in)
code[33] = 226 (pop [rbx + 2])
code[34] = 1
code[35] = 2
code[36] = 225 (push [rbx + 0])
code[37] = 1
code[38] = 0
code[39] = 33 (push 0)
code[40] = 0
code[41] = 25 (be)
code[42] = 33 (push 0)
code[43] = 0
code[43] = 16 (je else0:)
code[45] = 225 (push [rbx + 1])
code[46] = 1
code[47] = 1
code[48] = 33 (push 0)
code[49] = 0
code[50] = 25 (be)
code[51] = 33 (push 0)
code[52] = 0
code[52] = 16 (je else1:)
code[54] = 225 (push [rbx + 2])
code[55] = 1
code[56] = 2
code[57] = 33 (push 0)
code[58] = 0
code[59] = 26 (bne)
code[60] = 33 (push 0)
code[61] = 0
code[61] = 16 (je else2:)
code[63] = 33 (push 666000)
code[64] = 666000
code[65] = 7 (out)
code[66] = 18 (hlt)
code[66] = 9 (jmp elseExit2:)
code[68] = 33 (push 777000)
code[69] = 777000
code[70] = 7 (out)
code[71] = 18 (hlt)
code[71] = 9 (jmp elseExit1:)
code[73] = 33 (push -1000)
code[74] = -1000
code[75] = 225 (push [rbx + 2])
code[76] = 1
code[77] = 2
code[78] = 5 (mul)
code[79] = 225 (push [rbx + 1])
code[80] = 1
code[81] = 1
code[82] = 6 (div)
code[83] = 226 (pop [rbx + 3])
code[84] = 1
code[85] = 3
code[86] = 225 (push [rbx + 3])
code[87] = 1
code[88] = 3
code[89] = 7 (out)
code[90] = 18 (hlt)
code[90] = 9 (jmp elseExit0:)
code[92] = 225 (push [rbx + 1])
code[93] = 1
code[94] = 1
code[95] = 225 (push [rbx + 1])
code[96] = 1
code[97] = 1
code[98] = 5 (mul)
code[99] = 33 (push 4000)
code[100] = 4000
code[101] = 225 (push [rbx + 0])
code[102] = 1
code[103] = 0
code[104] = 5 (mul)
code[105] = 225 (push [rbx + 2])
code[106] = 1
code[107] = 2
code[108] = 5 (mul)
code[109] = 4 (sub)
code[110] = 226 (pop [rbx + 4])
code[111] = 1
code[112] = 4
code[113] = 225 (push [rbx + 4])
code[114] = 1
code[115] = 4
code[116] = 7 (out)
code[117] = 33 (push -1000)
code[118] = -1000
code[119] = 225 (push [rbx + 1])
code[120] = 1
code[121] = 1
code[122] = 5 (mul)
code[123] = 7 (out)
code[124] = 225 (push [rbx + 4])
code[125] = 1
code[126] = 4
code[127] = 33 (push 0)
code[128] = 0
code[129] = 25 (be)
code[130] = 33 (push 0)
code[131] = 0
code[131] = 16 (je else3:)
code[133] = 33 (push -1000)
code[134] = -1000
code[135] = 225 (push [rbx + 1])
code[136] = 1
code[137] = 1
code[138] = 5 (mul)
code[139] = 33 (push 2000)
code[140] = 2000
code[141] = 225 (push [rbx + 0])
code[142] = 1
code[143] = 0
code[144] = 5 (mul)
code[145] = 6 (div)
code[146] = 226 (pop [rbx + 3])
code[147] = 1
code[148] = 3
code[149] = 225 (push [rbx + 3])
code[150] = 1
code[151] = 3
code[152] = 7 (out)
code[153] = 18 (hlt)
code[153] = 9 (jmp elseExit3:)
code[155] = 33 (push -1000)
code[156] = -1000
code[157] = 225 (push [rbx + 1])
code[158] = 1
code[159] = 1
code[160] = 5 (mul)
code[161] = 225 (push [rbx + 4])
code[162] = 1
code[163] = 4
code[164] = 19 (sqrt)
code[165] = 3 (add)
code[166] = 33 (push 2000)
code[167] = 2000
code[168] = 225 (push [rbx + 0])
code[169] = 1
code[170] = 0
code[171] = 5 (mul)
code[172] = 6 (div)
code[173] = 226 (pop [rbx + 5])
code[174] = 1
code[175] = 5
code[176] = 33 (push -1000)
code[177] = -1000
code[178] = 225 (push [rbx + 1])
code[179] = 1
code[180] = 1
code[181] = 5 (mul)
code[182] = 225 (push [rbx + 4])
code[183] = 1
code[184] = 4
code[185] = 19 (sqrt)
code[186] = 4 (sub)
code[187] = 33 (push 2000)
code[188] = 2000
code[189] = 225 (push [rbx + 0])
code[190] = 1
code[191] = 0
code[192] = 5 (mul)
code[193] = 6 (div)
code[194] = 226 (pop [rbx + 6])
code[195] = 1
code[196] = 6
code[197] = 225 (push [rbx + 5])
code[198] = 1
code[199] = 5
code[200] = 7 (out)
code[201] = 225 (push [rbx + 6])
code[202] = 1
code[203] = 6
code[204] = 7 (out)
code[205] = 18 (hlt)
